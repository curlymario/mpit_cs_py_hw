# Матрица способов достижения клетки королём без диагонали (одношаговой ладьёй)
# представляет из себя треугольник паскаля, повёрнутый на 45 градусов
# K[i][j] = K[i-1][j] + K[i][j-1] = K сочетаний для i по j (если i > j)
# 0  0  0  0  0  0  0  
# 0  1  1  1  1  1  1 
# 0  1  2  3  4  5  6 
# 0  1  3  6  10 15 21 
# 0  1  4  10 20 35 56 
# 0  1  5  15 35 70 126
# 0  1  6  21 56 126 252


# === Наибольшая общая подпоследовательность ===
# A, B — одномерные массивы чисел
# len(A) = N, len(B) = M
# Подпоследовательность A — список C, содержащий элементы A в исходном порядке, но, возможно, не все
# [] — подпоследовательность любой последовательности и наименьшая общая подпоследовательность
# Fij — длина наибольшей возможной подпоследовательности частей A и B:
# A[0:i] — часть A,содержащая первые i элементов
# B[0:j] — часть B, содержащая первые j элементов
# Fij = 1 + F(i-1)(j-1) если ai = bj
# Fij = max(F(i-1)j, Fi(j-1)), если ai != bj
# F0j = 0, Fi0 = 0

def lcs(A, B): # largest common subsequence
    F = [[0]*(len(B)+1) for i in range(len(A)+1)]
    for i in range(1, len(A)+1):
        for j in range(1, len(B)+1):
            if A[i-1] = B[j-1]:
                F[i][j] = 1 + f[i-1][j-1]
            else:
                F[i][j] = max(F[i-1][j], F[i][j-1])
    return F[-1][-1]    # последний элемент содержит длину 

# === Наибольшая возрастающая подпоследовательность ===
# Возрастающая, значит, отсортированная
# A — одномерный массив
# Fi — подпоследовательность (срез) A[0:i], которая заканчивается и содержит ai = A[i-1]
# Fi = max(Fj) + 1, j < i, ai > aj
# F0 = 0
def gis(A):     # greatest increasing subsequence
    F = [0]*(len(A)+1)
    for i in range(1, len(A)+1):
        m = 0   # текущий макисмум
        for j in range(0, i):   # j < i
            if A[i-1] > A[j-1] and F[j] > m: 
                m = F[j]
        F[i] = m + 1
    return F[len(A)]

# === Дискретный алгоритм укладки рюкзака ===
# Есть мешок и набор предметов
# M — максимальный вес вещей
# Каждый предмет имеет свою стоимость Si и массу Mj
# Найти максимальную стоимость предметов, которую можно унести


# === Расстояние Левенштейна — алгоритм редакционных имзенений ===